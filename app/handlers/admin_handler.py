import ast
import asyncio
import os
import openai

from datetime import datetime, timedelta

from io import BytesIO
from aiogram import Router, types, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command, or_f, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
import validators

import app.database.orm_query as rq

from app.bots.auth import TelegramLogin
from app.keyboards.reply import get_keyboard
from app.keyboards.inline import get_callback_btns

from app.filters.check_admin import IsAdmin
from app.bots.get_account_app_data import AuthTgAPI
from app.utils.helpers import clear_folder, generate_dialogs, roles_distribution
from app.utils.account_manager import xlsx_accounts_parser

load_dotenv()

router = Router()
router.message.filter(IsAdmin())


BACK_TO_MENU = {"back_to_menu": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}
back = get_keyboard(BACK_TO_MENU["back_to_menu"])

ADMIN_MENU_KB_NAMES = {
    "accounts": "–ê–∫–∫–∞—É–Ω—Ç–∏ üîë",
    "session": "–°–µ—Å—ñ—ó üíª",
    "admin panel": "–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å ‚öôÔ∏è",
}
admin_menu = get_keyboard(
    ADMIN_MENU_KB_NAMES["accounts"],
    ADMIN_MENU_KB_NAMES["session"],
    ADMIN_MENU_KB_NAMES["admin panel"],
)

ADMIN_MANAGMENT_KB_NAMES = {
    "add_admin": "–î–æ–±–∞–≤–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚ûï",
    "remove_admin": "–í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üóëÔ∏è",
    "admin_list": "–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ üë•",
    "back_admin_managment": "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å",
}
admin_managment = get_keyboard(
    ADMIN_MANAGMENT_KB_NAMES["admin_list"],
    ADMIN_MANAGMENT_KB_NAMES["add_admin"],
    ADMIN_MANAGMENT_KB_NAMES["remove_admin"],
    BACK_TO_MENU["back_to_menu"],
    sizes=(1, 2, 1),
)
back_admin_managment = get_keyboard(ADMIN_MANAGMENT_KB_NAMES["back_admin_managment"])


# admin /admin
@router.message(
    or_f(
        Command("admin"),
        (BACK_TO_MENU["back_to_menu"] == F.text),
    )
)
async def cmd_admin(message: Message, state: FSMContext):
    await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üìã", reply_markup=admin_menu)
    await state.clear()


class AdminManagment(StatesGroup):
    add_admin = State()
    remove_admin = State()


# admin panel
@router.message(
    or_f(
        (ADMIN_MENU_KB_NAMES["admin panel"] == F.text),
        (ADMIN_MANAGMENT_KB_NAMES["back_admin_managment"] == F.text),
    )
)
async def cmd_admin_panel(message: Message, state: FSMContext):
    await message.answer('–†–æ–∑–¥—ñ–ª "–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å ‚öôÔ∏è"', reply_markup=admin_managment)
    await state.clear()


# admin list
@router.message(ADMIN_MANAGMENT_KB_NAMES["admin_list"] == F.text)
async def cmd_admin_panel(message: Message):
    admins = await rq.orm_get_all_admins()
    admins_str = "–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ ü§ñ\n"

    for admin in admins:
        admins_str += f"@{admin.name if admin.name else admin.tg_id}\n"

    await message.answer(admins_str, reply_markup=admin_managment)


# admin add
@router.message(ADMIN_MANAGMENT_KB_NAMES["add_admin"] == F.text)
async def add_admin_first(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø—Ä–∏–∫–ª–∞–¥:\n@andy12, @pocoX3, @tramp55",
        reply_markup=back_admin_managment,
    )
    await state.set_state(AdminManagment.add_admin)


@router.message(AdminManagment.add_admin)
async def add_admin_second(message: Message, state: FSMContext):
    await state.update_data(username=message.text)
    username = (await state.get_data()).get("username")

    if username[0] == "@":
        username = username[1:]

        if await rq.orm_get_user(value=username, get_by="name"):
            result = await rq.orm_add_admin(username)

            if result:
                await message.answer(
                    f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä @{username} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π ‚úÖ",
                    reply_markup=admin_managment,
                )
            else:
                await message.answer(
                    f"@{username} –º–∞—î –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    reply_markup=admin_managment,
                )
        else:
            await message.answer(
                f"@{username} –Ω–µ –º–∞—î –≤ –±–∞–∑—ñ.", reply_markup=admin_managment
            )
    else:
        await message.answer(
            "–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —é–∑–µ—Ä–Ω–µ–π–º, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.",
            reply_markup=admin_managment,
        )

    await state.clear()


# admin remove
@router.message(ADMIN_MANAGMENT_KB_NAMES["remove_admin"] == F.text)
async def remove_admin_first(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø—Ä–∏–∫–ª–∞–¥:\n@andy12, @pocoX3, @tramp55",
        reply_markup=back_admin_managment,
    )
    await state.set_state(AdminManagment.remove_admin)


@router.message(AdminManagment.remove_admin)
async def remove_admin_second(message: Message, state: FSMContext):
    await state.update_data(username=message.text)
    username = (await state.get_data()).get("username")

    if username[0] == "@":
        username = username[1:]

        if username == message.from_user.username:
            await message.answer(
                "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç–∏ –≤ —Å–µ–±–µ –ø—Ä–∞–≤–∞!", reply_markup=admin_managment
            )
            await state.clear()
            return

        admin = await rq.orm_get_user(value=username, get_by="name")

        if admin:
            if admin.is_admin:
                await rq.orm_remove_admin(username)
                await message.answer(
                    f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä @{username} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π ‚úÖ",
                    reply_markup=admin_managment,
                )
            else:
                await message.answer(
                    f"@{username} –Ω–µ –º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    reply_markup=admin_managment,
                )
        else:
            await message.answer(
                f"@{username} –Ω–µ –º–∞—î –≤ –±–∞–∑—ñ.", reply_markup=admin_managment
            )
    else:
        await message.answer(
            "–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —é–∑–µ—Ä–Ω–µ–π–º, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.",
            reply_markup=admin_managment,
        )

    await state.clear()


# account panel
ACCOUNT_MANAGMENT_KB_NAMES = {
    "account_list": "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ üìÉ",
    "add_accounts": "–î–æ–±–∞–≤–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∏ üì≤",
    "remove_account": "–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∏ üóëÔ∏è",
    "api_auth_proccess": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API ‚öô",
    "telegram_auth_proccess": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Telegram üöÄ",
    "set_proxy": "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–∫—Å—ñ üåê",
    "back_account_managment": '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é "–ê–∫–∫–∞—É–Ω—Ç–∏"',
}
account_managment = get_keyboard(
    ACCOUNT_MANAGMENT_KB_NAMES["account_list"],
    ACCOUNT_MANAGMENT_KB_NAMES["add_accounts"],
    ACCOUNT_MANAGMENT_KB_NAMES["remove_account"],
    ACCOUNT_MANAGMENT_KB_NAMES["api_auth_proccess"],
    ACCOUNT_MANAGMENT_KB_NAMES["telegram_auth_proccess"],
    ACCOUNT_MANAGMENT_KB_NAMES["set_proxy"],
    BACK_TO_MENU["back_to_menu"],
    sizes=(1, 2, 2, 1, 1),
)
back_account_managment = get_keyboard(
    ACCOUNT_MANAGMENT_KB_NAMES["back_account_managment"]
)


class AccountState(StatesGroup):
    add_accounts = State()
    remove_accounts = State()


@router.message(
    or_f(
        (ADMIN_MENU_KB_NAMES["accounts"] == F.text),
        (ACCOUNT_MANAGMENT_KB_NAMES["back_account_managment"] == F.text),
    )
)
async def account_panel(message: Message, state: FSMContext):
    global auth_task, api_auth_task

    if auth_task and not auth_task.done():
        auth_task.cancel()
        try:
            await auth_task
        except asyncio.CancelledError:
            await message.answer("–¢–µ–ª–µ–≥—Ä–∞–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")

    if api_auth_task and not api_auth_task.done():
        api_auth_task.cancel()
        try:
            await api_auth_task
        except asyncio.CancelledError:
            await message.answer("API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")

    await message.answer('–†–æ–∑–¥—ñ–ª "–ê–∫–∫–∞—É–Ω—Ç–∏ üîë"', reply_markup=account_managment)
    await state.clear()


# account list
@router.message(ACCOUNT_MANAGMENT_KB_NAMES["account_list"] == F.text)
async def account_list(message: Message):
    accounts = await rq.orm_get_all_accounts()

    await message.answer("–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ üëá", reply_markup=account_managment)

    if not accounts:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return

    for account in accounts:
        text = f"–ù–æ–º–µ—Ä: <code>{account.number}</code>\n"
        text += f"–ü—Ä–æ–∫—Å—ñ: <code>{account.proxy}</code>\n"
        text += f"–î–æ–¥–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {'‚úÖ' if account.is_app_created else '‚ùå'}\n"
        if account.is_app_created:
            text += f"API ID: <code>{account.api_id}</code>\n"
            text += f"API HASH: <code>{account.api_hash}</code>\n"
            text += f"–°–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: {'‚úÖ' if account.is_session_created else '‚ùå'}\n"
            if account.is_session_created:
                text += f"ID —Å–µ—Å—ñ—ñ: {account.session_id}\n"

        await message.answer(text)


# add accounts
@router.message(ACCOUNT_MANAGMENT_KB_NAMES["add_accounts"] == F.text)
async def add_account_first(message: Message, state: FSMContext):
    await message.answer(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±–∞–∑—É –Ω–æ–º–µ—Ä—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ .xlsx",
        reply_markup=back_account_managment,
    )
    await state.set_state(AccountState.add_accounts)


@router.message(AccountState.add_accounts)
async def add_account_second(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(file_name=message.document)
    data = await state.get_data()
    document = data.get("file_name")

    if document is None:
        await message.reply(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–∞–π–ª.",
            reply_markup=account_managment,
        )
        await state.clear()
        return

    # If document is lxml create async task for ChatJoiner
    if (
        document.mime_type
        == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    ):
        file_info = await bot.get_file(document.file_id)
        clear_folder(os.getenv("EXCEL_FOLDER"))

        await bot.download_file(file_info.file_path, os.getenv("EXCEL_ACCOUNTS"))
        await message.reply(f"–§–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ")
        result = await xlsx_accounts_parser(os.getenv("EXCEL_ACCOUNTS"))

        if result:
            await message.reply(
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤: {result}", reply_markup=account_managment
            )
        else:
            await message.reply(
                f"–ù–µ –¥–æ–¥–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É", reply_markup=account_managment
            )

    else:
        await message.reply(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å Excel —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ .xlsx",
            reply_markup=account_managment,
        )
    await state.clear()


# remove accounts
@router.message(ACCOUNT_MANAGMENT_KB_NAMES["remove_account"] == F.text)
async def remove_account(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä:", reply_markup=back_account_managment)
    await state.set_state(AccountState.remove_accounts)


@router.message(AccountState.remove_accounts)
async def remove_account_second(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    data = await state.get_data()
    number = data.get("number")

    if number is None:
        await message.reply(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä.",
            reply_markup=account_managment,
        )
        await state.clear()
        return

    check = await rq.orm_get_account(number)

    if check:
        await rq.orm_remove_account(number)
        await message.reply(
            f"–ê–∫–∫–∞—É–Ω—Ç <code>{number}</code> —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–∏ÃÜ",
            reply_markup=account_managment,
        )
    else:
        await message.reply(
            f"–ê–∫–∫–∞—É–Ω—Ç <code>{number}</code> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=account_managment,
        )

    await state.clear()


# ---------- TG AUTH ----------
class Auth(StatesGroup):
    code = State()


login_manager = None
auth_task = None


# telegram auth
@router.message(ACCOUNT_MANAGMENT_KB_NAMES["telegram_auth_proccess"] == F.text)
async def api_auth(message: Message):
    btns = {"–¢–∞–∫": "start_auth_tg_yes", "–ù—ñ": "start_auth_tg_no"}
    await message.answer(
        f'–†–æ–∑–¥—ñ–ª "{ACCOUNT_MANAGMENT_KB_NAMES["telegram_auth_proccess"]}"',
        reply_markup=back_account_managment,
    )
    await message.answer(
        "–ó–∞–ø—É—Ç–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó?", reply_markup=get_callback_btns(btns=btns)
    )


@router.callback_query(F.data == "start_auth_tg_yes")
async def start_auth_tg_yes(callback: CallbackQuery, state: FSMContext):
    global auth_task, login_manager

    if auth_task and not auth_task.done():
        auth_task.cancel()
        login_manager = None

    await callback.answer()
    await callback.message.edit_text("–†–æ–∑–ø–æ—á–∏–Ω–∞—é Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é...")

    # await login_manager.start_login(callback.message, state)
    login_manager = TelegramLogin(account_managment)
    auth_task = asyncio.create_task(login_manager.start_login(callback.message))
    await state.set_state(Auth.code)


@router.callback_query(F.data == "start_auth_tg_no")
async def start_auth_tg_no(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
    await callback.message.answer("–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –Ω–∞–∑–∞–¥...", reply_markup=account_managment)


@router.message(Auth.code)
async def code_handler(message: types.Message, state: FSMContext):
    if message.text and message.text.isdigit():
        global auth_task, login_manager

        code_text = message.text
        auth_task = await login_manager.finish_login(message, code_text)

        await state.clear()
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")


# ---------- API AUTH ----------
class APIAuth(StatesGroup):
    auth_status = State()
    code = State()


api_login_manager = None
api_auth_task = None


# api auth panel
@router.message(ACCOUNT_MANAGMENT_KB_NAMES["api_auth_proccess"] == F.text)
async def api_auth(message: Message):
    btns = {"–¢–∞–∫": "start_api_auth_tg_yes", "–ù—ñ": "start_api_auth_tg_no"}
    await message.answer(
        f'–†–æ–∑–¥—ñ–ª "{ACCOUNT_MANAGMENT_KB_NAMES["api_auth_proccess"]}"',
        reply_markup=back_account_managment,
    )
    await message.answer(
        "–ó–∞–ø—É—Ç–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó API?", reply_markup=get_callback_btns(btns=btns)
    )


@router.callback_query(F.data == "start_api_auth_tg_yes")
async def start_auth_tg_yes(callback: CallbackQuery, state: FSMContext):
    global api_auth_task, api_login_manager

    await callback.answer()
    await callback.message.edit_text("–†–æ–∑–ø–æ—á–∏–Ω–∞—é Telegram API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é...")

    if api_auth_task and not api_auth_task.done():
        api_auth_task.cancel()

    if not api_login_manager:
        api_login_manager = None

    api_login_manager = AuthTgAPI(account_managment)
    # await api_login_manager.start_login(callback.message)
    api_auth_task = asyncio.create_task(api_login_manager.start_login(callback.message))

    await state.set_state(APIAuth.auth_status)


@router.callback_query(F.data == "start_api_auth_tg_no")
async def start_auth_tg_no(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
    await callback.message.answer("–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –Ω–∞–∑–∞–¥...", reply_markup=account_managment)


@router.message(APIAuth.auth_status)
async def api_auth_handler(message: Message, state: FSMContext):
    global api_login_manager

    print("!" * 10, api_login_manager)
    await api_login_manager.first_step(message)
    await state.set_state(APIAuth.code)


@router.message(APIAuth.code)
async def code_handler(message: types.Message, state: FSMContext):
    global api_auth_task, api_login_manager

    code_text = message.text
    api_auth_task = await api_login_manager.second_step(message, code_text)

    await state.set_state(APIAuth.auth_status)


# ---------- SESSION ----------
# session panel
SESSION_MANAGMENT_KB_NAMES = {
    "add_session": "–î–æ–±–∞–≤–∏—Ç–∏ —Å–µ—Å—ñ—é üíª",
    "remove_session": "–í–∏–¥–∞–ª–∏—Ç–∏ —Å–µ—Å—ñ—é üóëÔ∏è",
    "session_list": "–°–ø–∏—Å–æ–∫ —Å–µ—Å—ñ–π üìï",
    "step_back": "–ö—Ä–æ–∫ –Ω–∞–∑–∞–¥",
    "back_session_managment": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø–∞–Ω–µ–ª—ñ —Å–µ—Å—ñ–π",
}
session_managment = get_keyboard(
    SESSION_MANAGMENT_KB_NAMES["session_list"],
    SESSION_MANAGMENT_KB_NAMES["add_session"],
    SESSION_MANAGMENT_KB_NAMES["remove_session"],
    BACK_TO_MENU["back_to_menu"],
    sizes=(1, 2, 1),
)
back_session_managment = get_keyboard(
    SESSION_MANAGMENT_KB_NAMES["step_back"],
    SESSION_MANAGMENT_KB_NAMES["back_session_managment"],
    sizes=(1, 1),
)


class SessionState(StatesGroup):
    session_type = State()
    prompt = State()
    account_count = State()
    chat_url = State()
    answer_time = State()

    remove_session = State()

    texts = {
        "SessionState:session_type": "–í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø —Å–µ—Å—ñ—ó –∑–∞–Ω–æ–≤–æ:",
        "SessionState:prompt": "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–ø—Ç –∑–∞–Ω–æ–≤–æ:",
        "SessionState:chat_url": "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç –∑–∞–Ω–æ–≤–æ:",
        "SessionState:answer_time": "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É –º—ñ–∂ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞–Ω–æ–≤–æ:",
    }


# session panel
@router.message(
    or_f(
        (ADMIN_MENU_KB_NAMES["session"] == F.text),
        (SESSION_MANAGMENT_KB_NAMES["back_session_managment"] == F.text),
    )
)
async def session_panel(message: Message, state: FSMContext):
    await message.answer('–†–æ–∑–¥—ñ–ª "–°–µ—Å—ñ—ó üíª"', reply_markup=session_managment)
    await state.clear()


# add session
@router.message(StateFilter(None), SESSION_MANAGMENT_KB_NAMES["add_session"] == F.text)
async def add_session_first(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–µ—Å—ñ—ó üëá", reply_markup=back_session_managment)
    await state.set_state(SessionState.session_type)


@router.message(StateFilter("*"), F.text.casefold() == "–∫—Ä–æ–∫ –Ω–∞–∑–∞–¥")
async def back_step_handler(message: types.Message, state: FSMContext):

    current_state = await state.get_state()
    print("!" * 10, current_state)
    if current_state == SessionState.session_type:
        await message.answer(
            "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫—Ä–æ–∫ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–µ—Å—ñ—ó, –∞–±–æ –≤–∏–π–¥—ñ—Ç—å –≤ –º–µ–Ω—é"
        )
        return

    previous = None
    for step in SessionState.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(
                f"–û–∫, –≤–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É \n{SessionState.texts[previous.state]}"
            )
            return
        previous = step


@router.message(SessionState.session_type, F.text)
async def add_session_second(message: Message, state: FSMContext):
    await state.update_data(session_type=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–ø—Ç üëá", reply_markup=back_session_managment)
    await state.set_state(SessionState.prompt)


@router.message(SessionState.session_type)
async def add_session_fifth_wrong(message: types.Message):
    await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ –¥–∞–Ω—ñ, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–Ω–æ–≤—É")


@router.message(SessionState.prompt, F.text)
async def add_session_third(message: Message, state: FSMContext):
    prompt = message.text

    result = await generate_dialogs(prompt, message, back_session_managment)

    if not result:
        await message.answer(
            "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ JSON –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ GPT. –°–ø—Ä–æ–±—É–∏ÃÜ—Ç–µ —â–µ —Ä–∞–∑ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥.\n\n–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–ø—Ç üëá",
            reply_markup=back_session_managment,
        )
        return

    await state.update_data(data_json=result)


@router.message(SessionState.prompt)
async def add_session_fifth_wrong(message: types.Message):
    await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ –¥–∞–Ω—ñ, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–≤—ñ–∂–æ–∫ —á–∞—Å—É –∑–Ω–æ–≤—É")


@router.callback_query(F.data == "use_dialog")
async def use_dialog(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–î—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")

    await callback.message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç üëá", reply_markup=back_session_managment
    )

    await state.set_state(SessionState.chat_url)


@router.callback_query(F.data == "dont_use_dialog")
async def dont_use_dialog(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–î—ñ–∞–ª–æ–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
    await add_session_second(callback.message, state)


@router.message(SessionState.chat_url, F.text)
async def add_session_fourth(message: Message, state: FSMContext):
    url = message.text

    if validators.url(url):
        await message.answer("–Æ—Ä–ª –ø—ñ–¥—ñ–π—à–æ–≤", reply_markup=back_session_managment)
        await state.update_data(chat_url=message.text)

        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É –º—ñ–∂ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Å–µ–∫—É–Ω–¥–∏)\n–ü—Ä–∏–∫–ª–∞–¥: 60-120, 35-60, 20-30",
            reply_markup=back_session_managment,
        )
        await state.set_state(SessionState.answer_time)
    else:
        await message.answer(
            "–Æ—Ä–ª –Ω–µ –≤–∞–ª—ñ–¥–Ω–∏–π, –≤–≤–µ–¥—ñ—Ç—å —é—Ä–ª —á–∞—Ç—É –∑–Ω–æ–≤—É",
            reply_markup=back_session_managment,
        )
        return


@router.message(SessionState.chat_url)
async def add_session_fifth_wrong(message: types.Message):
    await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ –¥–∞–Ω—ñ, –≤–≤–µ–¥—ñ—Ç—å —é—Ä–ª —á–∞—Ç—É –∑–Ω–æ–≤—É")


@router.message(SessionState.answer_time, F.text)
async def add_session_fifth(message: Message, state: FSMContext):
    answer_time = message.text.split("-")

    if len(answer_time) != 2:
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É –º—ñ–∂ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
            reply_markup=back_session_managment,
        )
        return

    print("!" * 10, int(answer_time[0]) <= int(answer_time[1]))
    if int(answer_time[0]) >= int(answer_time[1]):
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É –º—ñ–∂ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
            reply_markup=back_session_managment,
        )
        return

    await state.update_data(answer_time=message.text)

    data = await state.get_data()

    session_type = data.get("session_type")
    data_json = data.get("data_json")
    chat_url = data.get("chat_url")

    add_session = await rq.orm_add_session(
        session_type, data_json, chat_url, message.text
    )

    if add_session:
        await message.answer("–°–µ—Å—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞!")
        await message.answer(
            f"–ù–∞–∑–≤–∞: {session_type}\n–Æ—Ä–ª —á–∞—Ç—É: {chat_url}\n–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {message.text}",
            reply_markup=session_managment,
        )
        await message.answer(
            "–ü–æ—á–∏–Ω–∞—é —Ä–æ–∑–ø—Ä–∏–¥—ñ–ª—è—Ç–∏ —Ä–æ–ª—ñ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º", reply_markup=session_managment
        )

        accounts = await rq.orm_get_free_accounts()
        session = await rq.orm_get_session(add_session.id)
        result_status, result_text = await roles_distribution(
            session.id, accounts, session.data
        )

        if result_status:
            await message.answer(
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}", reply_markup=session_managment
            )
            await rq.orm_update_session(add_session.id, is_dialog_created=True)
        else:
            await message.answer(result_text, reply_markup=session_managment)
    else:
        await message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É!")

    await state.clear()


@router.message(SessionState.answer_time)
async def add_session_fifth_wrong(message: types.Message):
    await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ –¥–∞–Ω—ñ, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–≤—ñ–∂–æ–∫ —á–∞—Å—É –∑–Ω–æ–≤—É")


# session list
@router.message(SESSION_MANAGMENT_KB_NAMES["session_list"] == F.text)
async def session_list(message: Message):
    sessions = await rq.orm_get_all_sessions()
    btns = {}

    if sessions:
        for session in sessions:
            btns[f"{session.id} - {session.session_type}"] = (
                f"session_settings_{session.id}"
            )

        await message.answer(
            "–°–ø–∏—Å–æ–∫ —Å–µ—Å—ñ–π üìï",
            reply_markup=get_callback_btns(btns=btns, sizes=(1,)),
        )
    else:
        await message.answer("–°–µ—Å—ñ–π –Ω–µ–º–∞—î", reply_markup=session_managment)


# session list
@router.callback_query(F.data == "session_list")
async def session_list(callback: CallbackQuery):
    sessions = await rq.orm_get_all_sessions()
    btns = {}

    for session in sessions:
        btns[f"{session.id} - {session.session_type}"] = (
            f"session_settings_{session.id}"
        )

    await callback.message.edit_text(
        "–°–ø–∏—Å–æ–∫ —Å–µ—Å—ñ–π üìï",
        reply_markup=get_callback_btns(btns=btns, sizes=(1,)),
    )


# session settings
@router.callback_query(F.data.startswith("session_settings_"))
async def session_settings(callback: CallbackQuery):
    session_id = int(callback.data.split("_")[-1])
    session = await rq.orm_get_session(session_id)

    if session:
        await callback.answer()

        text = f"–ê–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è: {'‚úÖ' if session.is_active else '‚ùå'}\nID: <code>{session.id}</code>\n–°–µ—Å—ñ—è: {session.session_type}\n–ß–∞—Ç: {session.chat_url}\n\n–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {session.answer_time}\n\n"
        btns = {}

        if not session.is_dialog_created:
            btns["–°—Ç–≤–æ—Ä–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥"] = f"start_dialog_{session.id}"
        else:
            if session.is_active:
                btns["–ó—É–ø–∏–Ω–∏—Ç–∏ —Å–µ—Å—ñ—é"] = f"stop_session_{session.id}"
            else:
                btns["–†–æ–∑–ø–æ—á–∞—Ç–∏ —Å–µ—Å—ñ—é"] = f"start_session_{session.id}"

        btns["–ù–∞–∑–∞–¥"] = "session_list"

        await callback.message.edit_text(
            text, reply_markup=get_callback_btns(btns=btns, sizes=(1,))
        )


@router.callback_query(F.data.startswith("start_dialog_"))
async def start_dialog(callback: CallbackQuery, state: FSMContext):
    session_id = int(callback.data.split("_")[-1])

    await callback.answer()
    message_info = await callback.message.answer(
        "–ü–æ—á–∏–Ω–∞—é —Ä–æ–∑–ø—Ä–∏–¥—ñ–ª—è—Ç–∏ —Ä–æ–ª—ñ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º"
    )

    accounts = await rq.orm_get_free_accounts()
    session = await rq.orm_get_session(session_id)
    result_status, result_text = await roles_distribution(
        session.id, accounts, session.data
    )

    if result_status:
        await session_settings(callback)
        
        message_result = await callback.message.answer(
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}"
        )
        await rq.orm_update_session(session_id, is_dialog_created=True)
        
        await asyncio.sleep(2)
        await message_info.delete()
        await message_result.delete()
    else:
        await callback.message.answer(result_text, reply_markup=session_managment)

# remove session
@router.message(SESSION_MANAGMENT_KB_NAMES["remove_session"] == F.text)
async def remove_session(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å ID —Å–µ—Å—ñ—ñ", reply_markup=back_session_managment)
    await state.set_state(SessionState.remove_session)


@router.message(SessionState.remove_session)
async def remove_session(message: Message, state: FSMContext):
    await state.update_data(session_id=message.text)

    data = await state.get_data()
    session_id = data.get("session_id")

    if session_id is None:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å ID —Å–µ—Å—ñ—ñ", reply_markup=session_managment)
        return

    session = await rq.orm_get_session(int(session_id))

    if session is None:
        await message.answer("–°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", reply_markup=session_managment)
        return

    remove_result = await rq.orm_remove_session(int(session_id))

    if remove_result:
        await message.answer("–°–µ—Å—ñ—é —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ", reply_markup=session_managment)
    else:
        await message.answer(
            "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ñ", reply_markup=session_managment
        )

    await state.clear()


@router.message(Command("test"))
async def cmd_test(message: Message, state: FSMContext):
    accounts = await rq.orm_get_free_accounts()
    print(accounts)
    session = await rq.orm_get_session(3)
    result_status, result_text = await roles_distribution(
        session.id, accounts, session.data
    )

    if result_status:
        await message.answer(
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}", reply_markup=session_managment
        )
    else:
        await message.answer(result_text, reply_markup=session_managment)

    # await message.answer("test")
